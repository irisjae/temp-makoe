
                var teacher_mobile = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s mobile' })
                                Oo (document .querySelector ('#teacher #mobile') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                                                        else if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid number for t
                                                        else if (y .value .length < 8)
                                                                x ({ error: 'You must fill in a number of 8 digits
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var students = [1, 2, 3, 4, 5] .map (order => {
                        var dom = document .querySelector ('#student[order="' + order + '"]');

                        var student_name = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#name') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        //TODO: add mutationobservver for innerHTML
                        var student_grade = Oo (S .data (),
                                o (R .tap (x => {
                                        x ({ error: 'You must select a grade for each student' })
                                        Oo (dom .querySelector ('#grade') .querySelector ('select'),
                                                oO (y => {
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                                }))
                        )
                        var student_mobile = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#mobile') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid numb
                                                                else if (y .value .length < 8)
                                                                        x ({ error: 'You must fill in a number of
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        var student_email = Oo (S .data (),
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid emai
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )

                        var student = S (() => {
                                if (! student_name () && ! student_mobile () && ! student_email ())
                                        return undefined;
                                else if (! student_name ())
                                        return { error: 'You must fill in every competing student\'s name' }
                                else if (error_of (student_name ()))
                                        return student_name ()
                                else if (error_of (student_grade ()))
                                        return student_grade ()
                                else if (error_of (student_mobile ()))
                                        return student_mobile ()
                                else if (error_of (student_email ()))
                                        return student_email ()
                                else
                                        return {
                                                name: student_name (),
                                                grade: student_grade (),
                                                mobile: student_mobile (),
                                                email: student_email ()
                                        }
                        })


                var first_error = S (() =>
                        error_of (school_name ())
                        || error_of (group ())
                        || error_of (teacher_name ())
                        || error_of (teacher_email ())
                        || error_of (teacher_mobile ())
                        || error_of (students [0] ())
                        || error_of (students [1] ())
                        || error_of (students [2] ())
                        || error_of (students [3] ())
                        || error_of (students [4] ())
                        || error_of (description ())
                        || error_of (recommendation ())
                )
                        }))
                )

                var recommendation = Oo (S .data ({ error: 'You must agree to the competition rules' }),
                        o (R .tap (x => {
                                Oo (document .querySelector ('#recommendation'),
                                        oO (y => {
                                                ['click', 'touch'] .forEach (input => {
                                                        y .querySelector ('#hint[for=click]') .addEventListener (i
                                                                x ('yes')
                                                        })
                                                })
                                        }))
                        }))
                )

                var error_of = x => x && x .error;


                var error_of = x => x && x .error;


                        var first_error =
                        else if (students_info .length < 3)
                                return { error: 'You must register at least 3 students per team' }
                        else if (students_info .length > 5)
                                return { error: 'You must register at most 5 students per team' }
                                        }))
                        }))
                )

                var teacher_email = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s email' })
                                Oo (document .querySelector ('#teacher #email') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (! y .value)
                        || error_of (students [1] ())
                        || error_of (students [2] ())
                        || error_of (students [3] ())
                        || error_of (students [4] ())
                                        return student_name ()
                                else if (error_of (student_grade ()))
                                        return student_grade ()
                                else if (error_of (student_mobile ()))
                                        return student_mobile ()
                                else if (error_of (student_email ()))
                                        return student_email ()
                                else
                                        return {
                                                name: student_name (),
                                                grade: student_grade (),
                                                mobile: student_mobile (),
                                                email: student_email ()
                                        }
                        })

                        return student
                })
                var students_info = S (() => {
                        var number_of_students = Oo (students, o (R .findLastIndex (x => x () !== undefined)));
                        if (number_of_students < 3)
                                return { error: 'You must register at least 3 students per team' }
                        else if (number_of_students > 5)
                                return { error: 'You must register at most 5 students per team' }

                        var students_info = Oo (R .range (0, number_of_students),
                                o (R .map (x => students [x] ())));
                        if (Oo (students_info, o (R .any (x => x === undefined))))
                                return { error: 'You must fill in the names of every student in the team' }

                        var individual_error = Oo (students_info, o (R .find (error_of)))
                        if (individual_error)
                                return individual_error;
                                                        if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                                                        if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                                                        else if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                var teacher_email = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s email' })
                                Oo (document .querySelector ('#teacher #email') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s email
                                                        else if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid email for th
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var teacher_mobile = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s mobile' })
                                Oo (document .querySelector ('#teacher #mobile') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid number for t
                                                        else if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                                                        else if (y .value .length < 8)
                                                                x ({ error: 'You must fill in a number that has 8
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var students = [1, 2, 3, 4, 5] .map (order => {
                        var dom = document .querySelector ('#student[order="' + order + '"]');

                        var student_name = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#name') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        //TODO: add mutationobservver for innerHTML
                        var student_grade = Oo (S .data (),
                                o (R .tap (x => {
                                        x ({ error: 'You must select a grade for each student' })
                                        Oo (dom .querySelector ('#grade') .querySelector ('select'),
                                                oO (y => {
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                                }))
                        )
                        var student_mobile = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#mobile') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid numb
                                                                else if (y .value .length < 8)
                                                                        x ({ error: 'You must fill in a number tha
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        var student_email = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#email') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid emai
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )

                        var student = S (() => {
                                if (! student_name () && ! student_mobile () && ! student_email ())
                                        return undefined;
                                else if (! student_name ())
                                        return { error: 'You must fill in every competing student\'s name' }
                                else if (error_of (student_name ()))
                                        return student_name ()
                                else if (error_of (student_grade ()))
                                        return student_grade ()
                                else if (error_of (student_mobile ()))
                                        return student_mobile ()
                                else if (error_of (student_email ()))
                                        return student_email ()
                                else
                                        return {
                                                name: student_name (),
                                                grade: student_grade (),
                                                mobile: student_mobile (),
                                                email: student_email ()
                                        }
                        })

                        return student
                })
                var students_info = S (() => {
                        var number_of_students = Oo (students, o (R .findLastIndex (x => x () !== undefined)));
                        if (number_of_students < 3)
                                return { error: 'You must register at least 3 students per team' }
                        else if (number_of_students > 5)
                                return { error: 'You must register at most 5 students per team' }

                        var students_info = Oo (R .range (0, number_of_students),
                                o (R .map (x => students [x] ())));
                        if (Oo (students_info, o (R .any (x => x === undefined))))
                                return { error: 'You must fill in the names of every student in the team' }

                        var individual_error = Oo (students_info, o (R .find (error_of)))
                        if (individual_error)
                                return individual_error
                        else
                                return students_info
                })

                var description = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the written description' })
                                Oo (document .querySelector ('#description') .querySelector ('textarea'),
                                        oO (y => {
                                                var value = Oo (S .data (y .value), o (R .tap (x => {
                                                        y .addEventListener ('change', () => { x (y .value) })
                                                })));
                                                S (() => {
                                                        if (! value ()) {
                                                                x ({ error: 'You must fill in the written descript
                                                                return
                                                        }
                                                        var word_limit = (group () === 'primary') ?
                                                                        500
                                                                : (group () === 'junior-high' || group () === 'sen
                                                                        1000
                                                                :
                                                                        Infinity;
                                                        var used_english = Oo (value (), o (R .any (x => x .match
                                                        var used_chinese = Oo (value (), o (R .any (x => x .match
                                                        if (used_english && used_chinese) {
                                                                x ({ error: 'You cannot mix Chinese and English in
                                                                return
                                                        }
                                                        if (used_english)
                                                                var word_count = Oo (value (), o (R .split (/\w+/)
                                                        else if (used_chinese)
                                                                var word_count = Oo (value (), o (R .filter (x =>
                                x ({ error: 'You must choose a year group for the competition' })
                                Oo (document .querySelector ('#group'),
                                        oO (y => {
                                                ['click', 'touch'] .forEach (input => {
                                                        y .querySelector ('#primary #hint[for=click]') .addEventLi
                                                                x ('primary')
                                                        })
                                                        y .querySelector ('#junior-high #hint[for=click]') .addEve
                                                                x ('junior-high')
                                                        })
                                                        y .querySelector ('#senior-high #hint[for=click]') .addEve
                                                                x ('senior-high')
                                                        })
                                                })
                                        }))
                        }))
                )

                var teacher_name = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher name' })
                                Oo (document .querySelector ('#teacher #name') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (y .value)
                                                                x (y .value)
                                                        else
                                                                x ({ error: 'You must fill in the teacher name' })
                                                })
                                        }))
                        }))
                )

                var teacher_email = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s email' })
                                Oo (document .querySelector ('#teacher #email') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s email
                                                        else if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid email for th
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var teacher_mobile = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s mobile' })
                                Oo (document .querySelector ('#teacher #mobile') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('input', () => {
                                                        if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid number for t
                                                        else if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                                                        else if (y .value .length < 8)
                                                                x ({ error: 'You must fill in a number that has 8
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var students = [1, 2, 3, 4, 5] .map (order => {
                        var dom = document .querySelector ('#student[order="' + order + '"]');

                        var student_name = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#name') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        //TODO: add mutationobservver for innerHTML
                        var student_grade = Oo (S .data (),
                                o (R .tap (x => {
                                        x ({ error: 'You must select a grade for each student' })
                                        Oo (dom .querySelector ('#grade') .querySelector ('select'),
                                                oO (y => {
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                                }))
                        )
                        var student_mobile = Oo (S .data (),
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                        var dom = document .querySelector ('#student[order="' + order + '"]');

                        var student_name = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#name') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        //TODO: add mutationobservver for innerHTML
                        var student_grade = Oo (S .data (),
                                o (R .tap (x => {
                                        x ({ error: 'You must select a grade for each student' })
                                        Oo (dom .querySelector ('#grade') .querySelector ('select'),
                                                oO (y => {
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                        var dom = document .querySelector ('#student[order="' + order + '"]');

                        var student_name = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#name') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        //TODO: add mutationobservver for innerHTML
                        var student_grade = Oo (S .data (),
                                o (R .tap (x => {
                                        x ({ error: 'You must select a grade for each student' })
                                        Oo (dom .querySelector ('#grade') .querySelector ('select'),
                                                oO (y => {
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                                }))
                        )
                        var student_mobile = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#mobile') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('input', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid numb
                                                                else if (y .value .length < 8)
                                                                        x ({ error: 'You must fill in a number tha
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        var student_email = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#email') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid emai
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )

                        var student = S (() => {
                                                })
                                        }))
                        }))
                )

                var teacher_email = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s email' })
                                Oo (document .querySelector ('#teacher #email') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('change', () => {
                                                        if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s email
                                                        else if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid email for th
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var teacher_mobile = Oo (S .data (),
                        o (R .tap (x => {
                                x ({ error: 'You must fill in the teacher\'s mobile' })
                                Oo (document .querySelector ('#teacher #mobile') .querySelector ('input'),
                                        oO (y => {
                                                y .addEventListener ('input', () => {
                                                        if (! y .validity .valid)
                                                                x ({ error: 'You must fill in a valid number for t
                                                        else if (! y .value)
                                                                x ({ error: 'You must fill in the teacher\'s mobil
                                                        else if (y .value .length < 8)
                                                                x ({ error: 'You must fill in a number that has 8
                                                        else
                                                                x (y .value)
                                                })
                                        }))
                        }))
                )

                var students = [1, 2, 3, 4, 5] .map (order => {
                        var dom = document .querySelector ('#student[order="' + order + '"]');

                        var student_name = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#name') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        //TODO: add mutationobservver for innerHTML
                        var student_grade = Oo (S .data (),
                                o (R .tap (x => {
                                        x ({ error: 'You must select a grade for each student' })
                                        Oo (dom .querySelector ('#grade') .querySelector ('select'),
                                                oO (y => {
                                                        new MutationObserver (() => {
                                                                x (y .value)
                                                        }) .observe (y, { childList: true });
                                                        y .addEventListener ('change', () => {
                                                                x (y .value)
                                                        });
                                                }))
                                }))
                        )
                        var student_mobile = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#mobile') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('input', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid numb
                                                                else if (y .value .length < 8)
                                                                        x ({ error: 'You must fill in a number tha
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        var student_email = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#email') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid emai
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )

                        var student = S (() => {
                                                }))
                                }))
                        )
                        var student_mobile = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#mobile') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('input', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid numb
                                                                else if (y .value && y .value .length < 8)
                                                                        x ({ error: 'You must fill in a number tha
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )
                        var student_email = Oo (S .data (),
                                o (R .tap (x => {
                                        Oo (dom .querySelector ('#email') .querySelector ('input'),
                                                oO (y => {
                                                        y .addEventListener ('change', () => {
                                                                if (! y .validity .valid)
                                                                        x ({ error: 'You must fill in a valid emai
                                                                else
                                                                        x (y .value)
                                                        })
                                                }))
                                }))
                        )

                        var student = S (() => {
                                if (! student_name () && ! student_mobile () && ! student_email ())
                                        return undefined;
                                else if (! student_name ())
                                        return { error: 'You must fill in every competing student\'s name' }
                                else if (error_of (student_name ()))
                                        return student_name ()
                                else if (error_of (student_grade ()))
                                        return student_grade ()
                                else if (error_of (student_mobile ()))
                                        return student_mobile ()
                                else if (error_of (student_email ()))
                                        return student_email ()
                                else
                                        return {
                                                name: student_name (),
                                                grade: student_grade (),
                                                mobile: student_mobile (),
                                                email: student_email ()
                                        }
                        })

                        return student
                })
                var students_info = S (() => {
                        var number_of_students = Oo (students, o (R .findLastIndex (x => x () !== undefined))) + 1
                        if (number_of_students < 3)
                                return { error: 'You must register at least 3 students per team' }
                        else if (number_of_students > 5)
                                return { error: 'You must register at most 5 students per team' }

                        var students_info = Oo (R .range (0, number_of_students),
                                o (R .map (x => students [x] ())));
                        if (Oo (students_info, o (R .any (x => x === undefined))))
mumenrider:~/workspace (master) $ ls
bootstrap.css  dist.svg  frames@   next.js        package-lock.json  scripts/  styles.css
dist.html      drive/    frames_/  node_modules/  package.json       serve.js  transform/
mumenrider:~/workspace (master) $ vvim
.c9/                    dist.html               next.js                 serve.js
.git/                   dist.svg                node_modules/           styles.css
.home-chinese.html.swp  drive/                  package-lock.json       transform/
.nephyrite/             frames/                 package.json
bootstrap.css           frames_/                scripts/
mumenrider:~/workspace (master) $ vvim next.js
.c9/                    dist.html               next.js                 serve.js
.git/                   dist.svg                node_modules/           styles.css
.home-chinese.html.swp  drive/                  package-lock.json       transform/
.nephyrite/             frames/                 package.json
bootstrap.css           frames_/                scripts/
mumenrider:~/workspace (master) $ vvim next.js
.c9/                    dist.html               next.js                 serve.js
.git/                   dist.svg                node_modules/           styles.css
.home-chinese.html.swp  drive/                  package-lock.json       transform/
.nephyrite/             frames/                 package.json
bootstrap.css           frames_/                scripts/
mumenrider:~/workspace (master) $ vvim next.js

var auto = require ('__auto')
auto (() => {
        var next = auto .frame ('next')
        Array .from (next .querySelectorAll ('#hint[for="anchor"]')) .forEach (x => {
                x .outerHTML = auto .anchor_ify (x);
        })
        Array .from (next .querySelectorAll ('#hint[for=input]')) .forEach (x => {
                x .outerHTML = auto .input_ify (x)
        })
        Array .from (next .querySelectorAll ('#hint[for="text-area"]')) .forEach (x => {
                x .outerHTML = auto .textarea_ify (x)
        })
        Array .from (next .querySelectorAll ('#hint[for="select"]')) .forEach (x => {
                x .outerHTML = auto .select_ify (x);
        })
        return next
})
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
mumenrider:~/workspace (master) $ vvim
.c9/                    dist.html               next.js                 serve.js
.git/                   dist.svg                node_modules/           styles.css
.home-chinese.html.swp  drive/                  package-lock.json       transform/
.nephyrite/             frames/                 package.json
bootstrap.css           frames_/                scripts/
mumenrider:~/workspace (master) $ vvim scripts/
OoO.js     S.js       ramda.js   script.js
mumenrider:~/workspace (master) $ vvim .nephyrite/
.git/       .gitignore  experiment/ quick/      src/        temp/       transform/
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/
cordova/ install/ refresh/ serve/   ui/      webapp/
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/
cordova/ install/ refresh/ serve/   ui/      webapp/
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/ui/
$/                 node_modules/      package.json       scripts/           util.js
config.js          package-lock.json  scenes/            styles/
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/ui/scenes/
$.js            auto.js         dehydration.js  polyfill/
$.sh            automate/       frame.js        scenes.js
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/ui/scenes/
$.js            auto.js         dehydration.js  polyfill/
$.sh            automate/       frame.js        scenes.js
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/ui/scenes/automate/
corins.js           strip_images.js     tree_transforms.js
responsivify.js     surplusify.js       tree_utils.js
mumenrider:~/workspace (master) $ vvim .nephyrite/transform/ui/scenes/automate/corins.js

var hint_use = require ('./tree_utils') .hint_use;
var use_bounds = require ('./tree_utils') .use_bounds;

var input_ify = function (hint) {
        var use = hint_use (hint);
        var bounding_box = use_bounds (use)

        return '<rect ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
                'fill-opacity="0.001"' +
        '>' +
                '<animate attributeName="fill" from="black" to="blue" dur="1s" repeatCount="indefinite" />' +
        '</rect>' +
        '<foreignObject ' +
                'style="' + '; display: block;" ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
        '>' +
                '<overflow-clip ' +
                        'style="' +
                                'padding: 0;' +
                                'background: transparent;' +
                                'width: 100%;' +
                                'height: 100%;' +
                                'overflow: hidden;' +
                                'z-index: 9999;' +
                                'display: flex;' +
                                'flex-direction: column;' +
                                'align-content: space-around;' +
                '">' +
                        '<input ' +
                                ([] .filter .call (hint .attributes, function (attr) { return attr .nodeName !== 's
                                        .map (function (attr) {
                                                return attr .nodeName + '="' + attr .nodeValue + '"'
                                        }
                                ) .join (' ')) + ' ' +
                                'style="' +
                                        'outline: none;' +
                                        'border: none;' +
                                        'padding: 0px;' +
                                        'margin: 0px;' +
                                        'display: block;' +
                                        'background: transparent;' +
                                        'width: 1e+07vw;' +
                                        'height: 100%;' +
                                        '-webkit-appearance: none;' +
                                        (hint .getAttribute ('style') || '') +
                        '">' +
                '</overflow-clip>' +
        '</foreignObject>';
};
var textarea_ify = function (hint) {
        var use = hint_use (hint);
        var bounding_box = use_bounds (use)

        return '<rect ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
                'fill-opacity="0.001"' +
        '>' +
                '<animate attributeName="fill" from="black" to="blue" dur="1s" repeatCount="indefinite" />' +
        '</rect>' +
        '<foreignObject ' +
                'style="' + '; display: block;" ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
        '>' +
                '<overflow-clip ' +
                        'style="' +
                                'padding: 0;' +
                                'background: transparent;' +
                                'width: 100%;' +
                                'height: 100%;' +
                                'overflow: hidden;' +
                                'z-index: 9999;' +
                                'display: flex;' +
                                'flex-direction: row;' +
                                'align-content: space-around;' +
                '">' +
                        '<textarea ' +
                                ([] .filter .call (hint .attributes, function (attr) { return attr .nodeName !== 's
                                        .map (function (attr) {
                                                return attr .nodeName + '="' + attr .nodeValue + '"'
                                        }
                                ) .join (' ')) + ' ' +
                                'style="' +
                                        'outline: none;' +
                                        'border: none;' +
                                        'padding: 0px;' +
                                        'margin: 0px;' +
                                        'display: block;' +
                                        'background: transparent;' +
                                        'width: 100%;' +
                                        'height: 1e+07vh;' +
                                        '-webkit-appearance: none;' +
                                        (hint .getAttribute ('style') || '') +
                        '"></textarea>' +
                '</overflow-clip>' +
        '</foreignObject>';
};
var select_ify = function (hint) {
        var use = hint_use (hint);
        var bounding_box = use_bounds (use)

        return '<rect ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
                'fill-opacity="0.001"' +
        '>' +
                '<animate attributeName="fill" from="black" to="blue" dur="1s" repeatCount="indefinite" />' +
        '</rect>' +
        '<foreignObject ' +
                'style="' + '; display: block;" ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
        '>' +
                '<overflow-clip ' +
                        'style="' +
                                'padding: 0;' +
                                'background: transparent;' +
                                'width: 100%;' +
                                'height: 100%;' +
                                'overflow: hidden;' +
                                'z-index: 9999;' +
                                'display: flex;' +
                                'flex-direction: row;' +
                                'align-content: space-around;' +
                '">' +
                        '<select ' +
                                ([] .filter .call (hint .attributes, function (attr) { return attr .nodeName !== 's
                                        .map (function (attr) {
                                                return attr .nodeName + '="' + attr .nodeValue + '"'
                                        }
                                ) .join (' ')) + ' ' +
                                'style="' +
                                        'outline: none;' +
                                        'border: none;' +
                                        'padding: 0px;' +
                                        'margin: 0px;' +
                                        'display: block;' +
                                        'background: transparent;' +
                                        'width: 100%;' +
                                        'height: 100%;' +
                                        '-webkit-appearance: none;' +
                                        (hint .getAttribute ('style') || '') +
                        '"></textarea>' +
                '</overflow-clip>' +
        '</foreignObject>';
};
var anchor_ify = function (hint) {
        var use = hint_use (hint);
        var bounding_box = use_bounds (use)

        return '<a ' +
                'href="' + hint .getAttribute ('href') + '" ' +
        '>' +
                hint .outerHTML +
        '</a>';
};
var text_ify = function (hint, text) {
        text = text || '';

        var use = hint_use (hint);
        var bounding_box = use_bounds (use)

        return '<foreignObject ' +
                ([] .map .call (
                        hint .attributes,
                        function (attr) {
                                return attr .nodeName + '="' + attr .nodeValue + '"'
                        }
                ) .join (' ')) + ' ' +
                'transform="' + use .getAttribute ('transform') + '" ' +
                'width="' + (bounding_box .x_max - bounding_box .x_min) + '" ' +
                'height="' + (bounding_box .y_max - bounding_box .y_min) + '" ' +
        '>' +
                '<positioner text style="' + (hint .getAttribute ('positioner-style') || '') + '">' +
                        text .replace (/&/g, "&amp;") .replace (/</g, "&lt;") .replace (/>/g, "&gt;") +
                '</positioner>' +
        '</foreignObject>';
};
var image_ify = function (hint, src) {
        var use = hint_use (hint);
        var bounding_box = use_bounds (use)

        return '<foreignObject ' +
                ([] .filter .call (hint .attributes, function (attr) { return attr .nodeName !== 'style' })
                        .map (function (attr) {
                                return attr .nodeName + '="' + attr .nodeValue + '"'
                        }
                ) .join (' ')) + ' ' +
mumenrider:~/workspace (master) $ vvim next.js

var auto = require ('__auto')
auto (() => {
        var next = auto .frame ('next')
        Array .from (next .querySelectorAll ('#hint[for="anchor"]')) .forEach (x => {
                x .outerHTML = auto .anchor_ify (x);
        })
        Array .from (next .querySelectorAll ('#hint[for=input]')) .forEach (x => {
                x .outerHTML = auto .input_ify (x)
        })
        Array .from (next .querySelectorAll ('#hint[for="text-area"]')) .forEach (x => {
                x .outerHTML = auto .textarea_ify (x)
        })
        Array .from (next .querySelectorAll ('#hint[for="select"]')) .forEach (x => {
                x .outerHTML = auto .select_ify (x);
        })
        return next
})
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
mumenrider:~/workspace (master) $
