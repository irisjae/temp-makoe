var Z = require ('sanctuary')
var Z$ = require ('sanctuary-def')
var Z_ = Z .unchecked
var R = require ('ramda')

var T = T = _x =>
	_fn_obj =>
		!! Z_ .is (Z$ .Array (Z$ .Any)) (_fn_obj)
		? !! Z_ .equals ([]) (_fn_obj)
			? _x
			: T (T (_x) (R .head (_fn_obj))) (R .tail (_fn_obj))
		: !! Z_ .is (Z$ .AnyFunction) (_fn_obj)
		? _fn_obj (_x)
		: undefined
var $ = _fns =>
	_x => T (_x) (_fns)



var defined
//TODO: look for where and take in fn_form instead
var so = fn_form => 
	!! (fn_form .toString () .endsWith ('=>_'))
	? fn_form () ()
	: fn_form ()
var by = _fn => x => T (x) (_fn (x))
var go = Promise .resolve ()

module .exports =
{ Z, Z$, Z_, R
, T, $, defined, so, by, go }
