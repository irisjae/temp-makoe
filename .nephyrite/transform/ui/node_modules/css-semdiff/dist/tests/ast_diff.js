"use strict";
var assert = require("assert");
var css = require("css");
var ast_diff_1 = require("../ast_diff");
describe("astDiff", function () {
    it("should return result that represents 'no changed' when there are no changed between 2 StyleSheets", function () {
        var styleSheetA = css.parse("a { display: none; }");
        var styleSheetB = css.parse("a { display: none; }");
        var result = ast_diff_1.astDiff(styleSheetA, styleSheetB);
        assert(!result.changed);
    });
    it("should return extra nodes when the last StyleSheet has an extra node", function () {
        var styleSheetA = css.parse("");
        var styleSheetB = css.parse(".extra { display: none; }");
        var result = ast_diff_1.astDiff(styleSheetA, styleSheetB);
        assert(result.changed);
        assert.strictEqual(result.extra.length, 1);
        assertRuleNodeEqual(result.extra[0], [".extra"]);
        assert.deepEqual(result.missing, []);
    });
    it("should return missing nodes when the first StyleSheet has an extra node", function () {
        var styleSheetA = css.parse(".missing { display: none; }");
        var styleSheetB = css.parse("");
        var result = ast_diff_1.astDiff(styleSheetA, styleSheetB);
        assert(result.changed);
        assert.deepEqual(result.extra, []);
        assert.strictEqual(result.missing.length, 1);
        assertRuleNodeEqual(result.missing[0], [".missing"]);
    });
    it("should return extra and missing nodes when the both 2 StyleSheet have an extra node", function () {
        var styleSheetA = css.parse(".missing { display: none; }");
        var styleSheetB = css.parse(".extra { display: none; }");
        var result = ast_diff_1.astDiff(styleSheetA, styleSheetB);
        assert(result.changed);
        assert.strictEqual(result.extra.length, 1);
        assertRuleNodeEqual(result.extra[0], [".extra"]);
        assert.strictEqual(result.missing.length, 1);
        assertRuleNodeEqual(result.missing[0], [".missing"]);
    });
    it("should return extra and missing nodes when the both 2 StyleSheet have an extra node and several common nodes", function () {
        var styleSheetA = css.parse(".missing { display: none; } .common { display: none; }");
        var styleSheetB = css.parse(".extra { display: none; } .common { display: none; }");
        var result = ast_diff_1.astDiff(styleSheetA, styleSheetB);
        assert(result.changed);
        assert.strictEqual(result.extra.length, 1);
        assertRuleNodeEqual(result.extra[0], [".extra"]);
        assert.strictEqual(result.missing.length, 1);
        assertRuleNodeEqual(result.missing[0], [".missing"]);
    });
});
function assertNodeTypeEqual(node, nodeType) {
    assert.strictEqual(node.type, nodeType);
}
function assertRuleNodeEqual(node, selectors) {
    assertNodeTypeEqual(node, "rule");
    var ruleNode = node;
    assert.deepEqual(ruleNode.selectors, selectors);
}
