"use strict";
var console_document_1 = require("./console_document");
var css_utils_1 = require("../css_utils");
var string_utils_1 = require("../string_utils");
function formatAstDiffResult(result) {
    return console_document_1.ConsoleDocument.format([createAstDiffResultSummary(result)]);
}
exports.formatAstDiffResult = formatAstDiffResult;
function formatAstDiffResultVerbose(result) {
    var summary = createAstDiffResultSummary(result);
    return console_document_1.ConsoleDocument.format(console_document_1.ConsoleDocument.concat([
        formatExtraAndMissingNodes(result.extra, result.missing),
        "",
        string_utils_1.repeat("-", summary.length),
        summary,
    ]));
}
exports.formatAstDiffResultVerbose = formatAstDiffResultVerbose;
function createAstDiffResultSummary(result) {
    var extra = result.extra, missing = result.missing;
    return extra.length + " extra rules and " + missing.length + " missing rules";
}
function formatExtraAndMissingNodes(extraNodes, missingNodes) {
    var docForExtras = extraNodes.length > 0
        ? console_document_1.ConsoleDocument.concat(console_document_1.ConsoleDocument.intersperse([""], // 2 line breaks
        extraNodes.map(function (extraNode) { return formatNodesWithLabel("extra:", extraNode); })))
        : ["No extra nodes"];
    var docForMissings = missingNodes.length > 0
        ? console_document_1.ConsoleDocument.concat(console_document_1.ConsoleDocument.intersperse([""], // 2 line breaks
        missingNodes.map(function (missingNode) { return formatNodesWithLabel("missing:", missingNode); })))
        : ["No missing nodes"];
    return console_document_1.ConsoleDocument.concat([
        docForExtras,
        [""],
        docForMissings,
    ]);
}
function formatNodesWithLabel(label, node) {
    return [
        label,
        css_utils_1.stringifyCssNode(node).split("\n"),
    ];
}
