"use strict";
var console_document_1 = require("./console_document");
var string_utils_1 = require("../string_utils");
function formatOrderDiffResult(result) {
    return console_document_1.ConsoleDocument.format([createOrderDiffResultSummary(result)]);
}
exports.formatOrderDiffResult = formatOrderDiffResult;
function formatOrderDiffResultVerbose(result) {
    var selectors = Object.keys(result);
    var summary = createOrderDiffResultSummary(result);
    var verboseSummaries = selectors.map(function (selector) {
        var _a = result[selector], uptrends = _a.uptrends, downtrends = _a.downtrends;
        return formatSelectorOrderChangedVerbose(selector, uptrends, downtrends);
    });
    return console_document_1.ConsoleDocument.format(console_document_1.ConsoleDocument.concat([
        console_document_1.ConsoleDocument.concat(console_document_1.ConsoleDocument.intersperse([""], verboseSummaries)),
        "",
        string_utils_1.repeat("-", summary.length),
        summary,
    ]));
}
exports.formatOrderDiffResultVerbose = formatOrderDiffResultVerbose;
function createOrderDiffResultSummary(result) {
    var changedSelectors = Object.keys(result);
    return changedSelectors.length + " selectors changed";
}
function formatSelectorOrderChangedVerbose(selector, uptrendSelectors, downtrendSelectors) {
    return [
        ("order changed: " + selector),
        [
            formatUptrendSelectors(uptrendSelectors),
            formatDowntrendSelectors(downtrendSelectors),
        ],
    ];
}
function formatUptrendSelectors(uptrendSelectors) {
    if (uptrendSelectors.length <= 0) {
        return [];
    }
    return [
        "become to be lower than:",
        uptrendSelectors,
    ];
}
function formatDowntrendSelectors(downtrendSelectors) {
    if (downtrendSelectors.length <= 0) {
        return [];
    }
    return [
        "become to be higher than:",
        downtrendSelectors,
    ];
}
